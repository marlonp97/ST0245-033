# -*- coding: utf-8 -*-
"""Laboratorio1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xceWDwWFX0YyNbnadGylQ3VRKvVvhBaD
"""

# Punto 1.1

def lcsDNA(string1, string2):
  return lcsDNAaux(string1, string2, len(string1), len(string2))

def lcsDNAaux(string1, string2, m, n):
  if (m == 0 or n == 0):
    return 0
  if (string1[m-1] == string2[n-1]):
    return 1 + lcsDNAaux(string1[:m-1], string2[:n-1] , m-1, n-1)
    
  return max(lcsDNAaux(string1, string2[:n-1], m, n-1), lcsDNAaux(string1[:m-1], string2, m-1, n))
     
print(lcsDNA("AGGTAB", "GXTXAYB"))

# Punto 1.2

def formas(n):
  if (n <= 2):
    return n
  else:
    return formas(n - 1) + formas (n - 2)

formas(4)

# Punto 2.1.1 (Java)

public int factorial(int n) {
  if (n == 1) return 1;
  return n*factorial(n-1);
}

# Punto 2.1.1 (Python)

def factorial(n):
  if (n == 1):
    return 1
  else:
    return n*factorial(n-1)

factorial(5)

# Punto 2.1.2 (Java)

public int fibonacci(int n) {
  if (n == 0){
    return 0;
  }
  else if (n == 1){
    return 1;
  }
  return fibonacci(n-1) + fibonacci(n-2);
}

# Punto 2.1.2 (Python)

def fibonacci(n):
  if (n == 0):
    return 0
  elif (n == 1):
    return 1;
  return fibonacci(n-1) + fibonacci(n-2)

fibonacci(6)

# Punto 2.1.3 (Java)

public int bunnyEars(int bunnies) {
  if (bunnies == 0) return 0;
  return 2 + bunnyEars(bunnies-1);
}

# Punto 2.1.3 (Python)

def bunnyEars(bunnies):
  if (bunnies == 0):
    return 0;
  else:
    return 2 + bunnyEars(bunnies-1)

bunnyEars(10)

# Punto 2.1.4 (Java)

public int triangle(int rows) {
  if (rows == 0) return 0;
  return rows + triangle(rows-1);
}

# Punto 2.1.4 (Python)

def triangle(rows):
  if (rows == 0):
    return 0
  else:
    return rows + triangle(rows-1)

triangle(4)

# Punto 2.1.5 (Java)

public int sumDigits(int n) {
  if (n == 0) return 0;
  return n%10 + sumDigits(n/10);
}

# Punto 2.1.5 (Python)

def sumDigits(n):
  if (n == 0):
    return 0
  else:
    return n%10 + sumDigits(n//10)

sumDigits(126)

# Punto 2.2.1 (Java)

public boolean splitArray(int[] nums) {
  return splitArrayAux(0, nums, 0, 0);
}

private boolean splitArrayAux(int start, int[] nums, int g1, int g2) {
  if (start >= nums.length) {
    return g1 == g2;
  }
  else if (splitArrayAux(start+1, nums, g1 + nums[start], g2)) {
    return true;
  }
  else if (splitArrayAux(start+1, nums, g1, g2 + nums[start])) {
    return true;
  }
  else {
    return false;
  }
}

# Punto 2.2.1 (Python)

def splitArray(nums):
  return splitArrayAux(0, nums, 0, 0)

def splitArrayAux(start, nums, g1, g2):
  if (start >= len(nums)):
    return g1 == g2
  elif (splitArrayAux(start+1, nums, g1 + nums[start], g2)):
    return True
  elif (splitArrayAux(start+1, nums, g1, g2 + nums[start])):
    return True
  else:
    return False

splitArray([2, 5, 3])

# Punto 2.2.2 (Java)

public boolean splitOdd10(int[] nums) {
  return splitOdd10Aux(0, nums, 0, 0);
}

private boolean splitOdd10Aux(int start, int[] nums, int mult, int imp) {
  if (start >= nums.length) {
    return (mult%10 == 0) && (imp%2 == 1);
  }
  else if (splitOdd10Aux(start+1, nums, mult+nums[start], imp)) {
    return true;
  }
  else if (splitOdd10Aux(start+1, nums, mult, imp+nums[start])) {
    return true;
  }
  else {
    return false;
  }
}

# Punto 2.2.2 (Python)

def splitOdd10(nums):
  return splitOdd10Aux(0, nums, 0, 0)

def splitOdd10Aux(start, nums, mult, imp):
  if (start >= len(nums)):
    return (mult%10 == 0) and (imp%2 == 1)
  elif (splitOdd10Aux(start+1, nums, mult+nums[start], imp)):
    return True
  elif (splitOdd10Aux(start+1, nums, mult, imp+nums[start])):
    return True
  else:
    return False

splitOdd10([5, 5, 6, 1])

# Punto 2.2.3 (Java)

public boolean split53(int[] nums) {
  return split53Aux(0, nums, 0, 0);
}

private boolean split53Aux(int start, int[] nums, int n5, int n3) {
  if (start >= nums.length) {
    return n5 == n3;
  }
  else if (nums[start]%5 == 0) {
    return split53Aux(start+1, nums, n5+nums[start], n3);
  }
  else if (nums[start]%3 == 0) {
    return split53Aux(start+1, nums, n5, n3+nums[start]);
  }
  else if (split53Aux(start+1, nums, n5+nums[start], n3)) {
    return true;
  }
  else if (split53Aux(start+1, nums, n5, n3+nums[start])) {
    return true;
  }
  else {
    return false;
  }
}

# Punto 2.2.3 (Python)

def split53(nums):
  return split53Aux(0, nums, 0, 0)

def split53Aux(start, nums, n5, n3):
  if (start >= len(nums)):
    return n5 == n3
  elif (nums[start]%5 == 0):
    return split53Aux(start+1, nums, n5+nums[start], n3)
  elif (nums[start]%3 == 0):
    return split53Aux(start+1, nums, n5, n3+nums[start])
  elif (split53Aux(start+1, nums, n5+nums[start], n3)):
    return True
  elif (split53Aux(start+1, nums, n5, n3+nums[start])):
    return True
  else:
    return False

split53([2, 4, 2])

# Punto 2.2.4 (Java)

public boolean groupSumClump(int start, int[] nums, int target) {
  if (start >= nums.length) {
    return target == 0;
  }
  int sum = nums[start];
  while ((start < nums.length-1) && (nums[start+1] == nums[start])) {
    sum = sum+nums[start+1];
    start = start+1;
  }
  return groupSumClump(start+1, nums, target-sum) || groupSumClump(start+1, nums, target);
}

# Punto 2.2.4 (Python)

def groupSumClump(start, nums, target):
  if (start >= len(nums)):
    return target == 0
  sum = nums[start]
  while ((start < len(nums)-1) and (nums[start+1] == nums[start])):
    sum = sum+nums[start+1]
    start = start+1
  return groupSumClump(start+1, nums, target-sum) or groupSumClump(start+1, nums, target)

groupSumClump(0, [2, 4, 8], 10)

# Punto 2.2.5 (Java)

public boolean groupSum6(int start, int[] nums, int target) {
  if (start >= nums.length) {
    return target == 0;
  }
  else if (nums[start] == 6) {
    return groupSum6(start+1, nums, target-nums[start]);
  }
  else {
    return groupSum6(start+1, nums, target-nums[start]) || groupSum6(start+1, nums, target);
  }
}

# Punto 2.2.5 (Python)

def groupSum6(start, nums, target):
  if (start >= len(nums)):
    return target == 0
  elif (nums[start] == 6):
    return groupSum6(start+1, nums, target-nums[start])
  else:
    return groupSum6(start+1, nums, target-nums[start]) or groupSum6(start+1, nums, target)

groupSum6(0, [5, 6, 2], 8)

# Punto 4.1

def isPal(s):
  if ((len(s) == 0) or (len(s) == 1)):
    return True
  elif (s[0] == s[len(s)-1]):
    return isPal(s[1:len(s)-1])
  else:
    return False

isPal("anooona")

# Punto 4.6 (Malo)

def suma(n):
  return sumaAux(n, 0)

def sumaAux(n, i):
  if (i >= len(n)):
    return 0
  if ((i+1 <= len(n)) and (n[i] == n[i+1])):
    return sumaAux(n, i+1)
  else:
    return int(n[i]) + sumaAux(n, i+1)

print(suma("1001"))

# Punto 4.8

def cuantas(k, v, n):
  if (k == 0):
    return 1
  imposible = (n <= 0) and (k >= 1)
  imposible = imposible or (k < 0)
  if (imposible):
    return 0
  ni = cuantas(k, v, n-1)
  nj = cuantas(k-v[n-1], v, n)
  suma = ni + nj
  return suma

cuantas(7, [3,4,1], 3)

# Punto 4.11

def lucas(n):
  if (n == 0):
    return 2
  elif (n == 1):
    return 1
  return lucas(n - 1) + lucas (n - 2)

lucas(5)

# Punto 4.12

def conejo(A, n, m, i, j, d, k):
  if (i >= n or j >= m):
    return 0
  sat = 0
  if (A[])

def suma(n):
  return sumaux(n,0)

def sumaux(n,i):
  if (i >= len(n)):
    return 0
  if ((i + 1 <= len(n)) and (n[i] == n[i+1]) ):
    return 0
  else :
    return int(n[i]) + sumaux(n[1:len(n)-1],i+1)

print (suma("1001"))